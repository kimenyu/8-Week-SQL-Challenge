-- SQLBook: Code
-- Active: 1667084476415@@127.0.0.1@3306@dannys_dinner
-- SQLBook: Code
-- Active: 1667084476415@@127.0.0.1@3306@dannys_dinner
--What is the total amount each customer spent at the restaurant?
WITH total AS (SELECT customer_id, price
FROM sales
INNER JOIN menu
ON sales.product_id = menu.product_id)
SELECT customer_id, SUM(price)
FROM total
GROUP BY customer_id;
<img src = "D:\danny\images\one" alt = "quiz one" width="460" height="345">


--How many days has each customer visited the restaurant?
WITH days AS (SELECT customer_id, order_date
FROM sales)
SELECT customer_id, COUNT(order_date)
FROM days
GROUP BY customer_id;

--What was the first item from the menu purchased by each customer?
WITH first_item AS (SELECT sales.customer_id, sales.order_date, menu.product_name, 
DENSE_RANK() OVER(ORDER BY order_date ASC) 'Ranking'
FROM sales
INNER JOIN
menu 
ON sales.product_id = menu.product_id)
SELECT DISTINCT customer_id, product_name
FROM first_item
GROUP BY 1
ORDER BY customer_id;

--What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT menu.product_name, COUNT(sales.product_id)
FROM menu
JOIN sales
ON menu.product_id = sales.product_id
GROUP BY menu.product_name
ORDER BY sales.product_id DESC
LIMIT 1;


--Which item was the most popular for each customer?
WITH most_popular AS (SELECT menu.product_name, sales.customer_id, COUNT(sales.product_id) AS quantity ,
DENSE_RANK() OVER(PARTITION BY sales.customer_id ORDER BY COUNT(sales.product_id) DESC ) AS ranks
FROM menu
JOIN
sales
ON menu.product_id = sales.product_id
GROUP BY 1,2)
SELECT product_name, customer_id, quantity
FROM most_popular
WHERE ranks = 1;


--Which item was purchased first by the customer after they became a member? done
WITH first_item_as_member AS (SELECT sales.customer_id, sales.order_date, menu.product_name, members.join_date,
DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY order_date) AS Ranking
FROM sales 
JOIN members ON sales.customer_id = members.customer_id
JOIN  menu ON sales.product_id = menu.product_id
WHERE order_date >= join_date)
SELECT customer_id, product_name,order_date
FROM first_item_as_member
WHERE Ranking = 1;

--Which item was purchased just before the customer became a member?
WITH first_item_before_member AS (SELECT sales.customer_id, sales.order_date, menu.product_name, members.join_date,
DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY order_date) AS Ranking
FROM sales 
JOIN members ON sales.customer_id = members.customer_id
JOIN  menu ON sales.product_id = menu.product_id
WHERE order_date <= join_date)
SELECT customer_id, product_name,order_date
FROM first_item_before_member
WHERE Ranking = 1;

--What is the total items and amount spent for each member before they became a member?
SELECT COUNT (menu.product_name), sales.customer_id, SUM (menu.price)
FROM sales
INNER JOIN menu ON menu.product_id = sales.product_id
INNER JOIN members ON members.customer_id = sales.customer_id
WHERE join_date > order_date
GROUP BY customer_id;

--If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
WITH total AS (SELECT sales.customer_id, 
CASE WHEN sales.product_id = 1 THEN price * 20
ELSE menu.price * 10
END AS number_points
from sales
INNER JOIN menu
ON sales.product_id = menu.product_id)
SELECT customer_id, SUM(number_points)
FROM total
GROUP BY customer_id;

--In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

--Recreate the following table output using the available data:

SELECT sales.customer_id, sales.order_date, menu.product_name, menu.price,
CASE WHEN order_date <= join_date THEN 'N' 
ELSE 'Y' 
END AS member
FROM sales
LEFT JOIN menu ON sales.product_id = menu.product_id
LEFT JOIN members ON sales.customer_id = members.customer_id;

--Danny also requires further information about the ranking of customer products, but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.

WITH members AS (SELECT sales.customer_id, sales.order_date, menu.product_name, menu.price,
CASE WHEN order_date <= join_date THEN 'N' 
ELSE 'Y' 
END AS member
FROM sales
LEFT JOIN menu ON sales.product_id = menu.product_id
LEFT JOIN members ON sales.customer_id = members.customer_id)
SELECT customer_id, order_date, product_name, price,
CASE WHEN member = 'Y' THEN RANK() OVER (PARTITION BY customer_id,member ORDER BY order_date) ELSE NULL END AS ranking
FROM members
;
